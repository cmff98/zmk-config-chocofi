/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>


// tapping term definition
#define TAP_TERM_MS 200
#define QUICK_TAP_MS 250

#define BASE 0
#define SYM 1
#define NUM 2
#define NAV 3

#define LEFT_KEYS 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 // left-hand keys
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 // right-hand keys
#define THUMBS 30 31 32 33 34 35 // thumb keys

/ {
    behaviors {
        // HOME ROW MODS

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <RIGHT_KEYS THUMBS>;
            hold-trigger-on-release;
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <LEFT_KEYS THUMBS>;
            hold-trigger-on-release;
        };
    };
      combos {
    compatible = "zmk,combos";

    tab {
      bindings = <&trans>;
      key-positions = <2 3>;
    };

    ctrl {
      bindings = <&kp LCTRL>;
      key-positions = <26 27>;
    };

    cmd {
      bindings = <&kp LCMD>;
      key-positions = <37 38>;
    };

    alt {
      bindings = <&kp LEFT_ALT>;
      key-positions = <39 40>;
    };

    caps_word {
      bindings = <&caps_word>;
      key-positions = <17 18>;
    };

    delete {
      bindings = <&kp DEL>;
      key-positions = <32 33>;
    };

    quickpause {
      bindings = <&kp C_PLAY_PAUSE>;
      key-positions = <15 20>;
    };

    escape {
      bindings = <&kp ESCAPE>;
      key-positions = <19 20>;
    };

    colemakdh {
      bindings = <&tog 0>;
      key-positions = <18 12 23 17>;
    };

};


/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //             | TAB | NUM | SPC |   | ENT |  DEL | BCK |
             bindings = <
&kp Q           &kp W       &kp E         &kp R               &kp T                   &kp Y      &kp U                &kp I                 &kp O       &kp P               
&hm LGUI A      &hm LALT S  &hm LSHIFT D  &hm LCTRL F         &kp G                   &kp H      &hm RCTRL J          &hm RSHIFT K          &hm RALT L  &hm RGUI LS(COMMA)  
&kp Z           &kp X       &kp C         &kp V               &kp B                   &kp N      &kp M                &kp COMMA             &kp DOT     &kp LS(NUMBER_7)     
                            &kp TAB       &mo NUM             &hm LEFT_CONTROL SPACE  &kp ENTER  &lt SYM DEL          &hm LSHIFT BACKSPACE
      >;
        };

        sym_layer {
            // |  ! |  @  |  #  |  $  |  %  |   |  ^  |  &   |  *  |  =  |  ?  |
            // |  < |  [  |  {  |  (  |  _  |   |  -  |  )   |  }  |  ]  |  >  |
            // |  ´ |  '  |  ç  |  ~  |  \  |   |  +  |  "   |  ª  |  ª  |  |  |
            //             |    |     |  (  |   |     |  ON  |     |
         bindings = <
&kp LS(NUMBER_1)      &kp RA(NUMBER_2)  &kp HASH          &kp LS(NUMBER_4)  &kp LS(NUMBER_5)  &kp PIPE          &kp LS(NUMBER_6)  &kp LEFT_BRACE     &kp LS(NUMBER_0)  &kp LS(MINUS)            
&kp NON_US_BACKSLASH  &kp RA(NUMBER_8)  &kp RA(NUMBER_7)  &kp LS(NUMBER_8)  &kp LS(SLASH)     &kp SLASH         &kp LS(NUMBER_9)  &kp RA(NUMBER_0)   &kp RA(N9)        &kp LS(NON_US_BACKSLASH)  
&kp RIGHT_BRACKET                &kp MINUS         &kp SEMICOLON     &kp BACKSLASH            &kp GRAVE         &kp LEFT_BRACKET  &kp AT_SIGN       &kp DOUBLE_QUOTES  &trans            &kp TILDE                 
                                               &trans            &trans            &trans            &none       &trans            &trans
      >;    
        };
 
        num_layer {
            // |     |  7  |  8  |  9  |     |   |     | home |  end |      |     |
            // |  0  |  1  |  2  |  3  |     |   | left| down |   up | right|     |
            // |     |  4  |  5  |  6  |     |   |     |      |      |      |     |
            //             |     | ON  |     |   |     |      |      |
            
          bindings = <
&trans           &kp N7                 &kp N8                   &kp N9                     &trans       &trans          &kp HOME  &kp END        &trans     &trans 
&hm LGUI N0      &hm LALT NUMBER_1      &hm LSHIFT NUMBER_2      &hm LCTRL NUMBER_3         &trans       &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW   &kp RIGHT  &trans 
&trans           &kp N4                 &kp N5                   &kp N6                     &trans       &trans          &trans    &trans         &trans     &trans 
                                        &trans                   &trans                     &none        &trans          &mo NAV     &kp BACKSPACE
      >;
  
        };

        nav_layer {
                               |           |           |           |   |     ON     |           |            |
           bindings = <
  &none             &none           &kp LG(LS(S))      &none         &bt BT_SEL 0  &bt BT_SEL 3  &none               &none  &none      &none   
  &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT         &none         &bt BT_SEL 1  &bt BT_SEL 4  &kp LS(LC(ESCAPE))  &none  &kp LG(L)  &none  
   &none             &kp C_MUTE      &kp C_VOLUME_DOWN  &kp C_VOL_UP  &bt BT_SEL 2  &bt BT_CLR    &kp LG(TAB)         &none  &none      &none  
                                         &none              &none         &none         &none         &none               &none
      >;
        };
    };
};

